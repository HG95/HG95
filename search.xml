<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>牛客网SQL实战|Day 2</title>
    <url>/2020/09/16/niu-ke-wang-sql-shi-zhan-day-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Day two</p>
<a id="more"></a>

<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200916224814.jpg" alt="wallhaven-2eroxm">

<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><h1 id="第十一题"><a href="#第十一题" class="headerlink" title="第十一题"></a>第十一题</h1><ul>
<li><p>题目描述</p>
<p>获取所有员工当前的(dept_manager.to_date=’9999-01-01’)manager，如果员工是manager的话不显示(也就是如果当前的manager是自己的话结果不显示)。输出结果第一列给出当前员工的emp_no,第二列给出其manager对应的emp_no。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept_emp<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- '所有的员工编号'</span>
    <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span>   char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- '部门编号'</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept_manager<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span>   char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- '部门编号'</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- '经理编号'</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">emp_no</th>
<th align="left">manager_no</th>
</tr>
</thead>
<tbody><tr>
<td align="left">10001</td>
<td align="left">10002</td>
</tr>
<tr>
<td align="left">10003</td>
<td align="left">10004</td>
</tr>
<tr>
<td align="left">10009</td>
<td align="left">10010</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span>
        t2<span class="token punctuation">.</span>emp_no
<span class="token keyword">from</span> dept_emp t1
<span class="token keyword">inner</span> <span class="token keyword">join</span> dept_manager t2
<span class="token keyword">where</span> t1<span class="token punctuation">.</span>dept_no <span class="token operator">=</span> t2<span class="token punctuation">.</span>dept_no <span class="token operator">and</span> t1<span class="token punctuation">.</span>emp_no <span class="token operator">!=</span> t2<span class="token punctuation">.</span>emp_no <span class="token operator">and</span> t2<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结</p>
<ol>
<li><code>left join </code> 或者 <code>inner join</code> 进行表连接；</li>
<li><code>where</code> 多条件并列。</li>
</ol>
</li>
</ul>
<h1 id="第十二题"><a href="#第十二题" class="headerlink" title="第十二题"></a>第十二题</h1><ul>
<li><p>题目描述</p>
<p>获取所有部门中当前(dept_emp.to_date = ‘9999-01-01’)员工当前(salaries.to_date=’9999-01-01’)薪水最高的相关信息，给出dept_no, emp_no以及其对应的salary，按照部门升序排列。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept_emp<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span>   char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>salary<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th>dept_no</th>
<th>emp_no</th>
<th>salary</th>
</tr>
</thead>
<tbody><tr>
<td>d001</td>
<td>10001</td>
<td>88958</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t2<span class="token punctuation">.</span>dept_no<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span>
       <span class="token function">max</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>salary<span class="token punctuation">)</span>
<span class="token keyword">from</span> salaries t1
         <span class="token keyword">left</span> <span class="token keyword">join</span> dept_emp t2
                   <span class="token keyword">on</span> t1<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> t2<span class="token punctuation">.</span>emp_no
<span class="token keyword">where</span> t2<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span> <span class="token operator">and</span> t1<span class="token punctuation">.</span>to_date<span class="token operator">=</span><span class="token string">'9999-01-01'</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> t2<span class="token punctuation">.</span>dept_no<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结</p>
<ol>
<li><code>left join</code> 连接表</li>
<li><code>where</code> 与 <code>group by</code> 的执行顺序。</li>
</ol>
</li>
</ul>
<h1 id="第十三题"><a href="#第十三题" class="headerlink" title="第十三题"></a>第十三题</h1><ul>
<li><p>题目描述</p>
<p>从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token string">"titles"</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>title<span class="token punctuation">`</span>     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">title</th>
<th align="left">t</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Assistant Engineer</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">Engineer</td>
<td align="left">4</td>
</tr>
<tr>
<td align="left">省略</td>
<td align="left">省略</td>
</tr>
<tr>
<td align="left">Staff</td>
<td align="left">3</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> title<span class="token punctuation">,</span>
<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> t
<span class="token keyword">from</span> titles
<span class="token keyword">group</span> <span class="token keyword">by</span> title
<span class="token keyword">having</span> t <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结</p>
<ol>
<li><p><code>count()</code> 计数，传入不同参数的对 <code>null</code> 的处理：</p>
<p><code>count()</code> <strong>会忽略列值为空。</strong></p>
<p><code>count(列名)</code> 只包括列名那一列，在统计结果的时候，<strong>会忽略列值为空。</strong></p>
<p><code>count(*)</code>包括了所有的列，相当于行数，在统计结果的时候，<strong>不会忽略列值为NULL。</strong></p>
<p><code>count(1)</code>包括了忽略所有列，用1代表代码行，在统计结果的时候，<strong>不会忽略列值为NULL。</strong></p>
</li>
</ol>
</li>
</ul>
<h1 id="第十四题"><a href="#第十四题" class="headerlink" title="第十四题"></a>第十四题</h1><ul>
<li><p>题目描述</p>
<p>从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。<br>注意对于重复的emp_no进行忽略(即emp_no重复的title不计算，title对应的数目t不增加)。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>titles<span class="token punctuation">`</span> <span class="token punctuation">(</span>
<span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>to_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">title</th>
<th align="left">t</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Assistant Engineer</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">Engineer</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">省略</td>
<td align="left">省略</td>
</tr>
<tr>
<td align="left">Staff</td>
<td align="left">3</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> title<span class="token punctuation">,</span>
<span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> emp_no<span class="token punctuation">)</span> t
<span class="token keyword">from</span> titles
<span class="token keyword">group</span> <span class="token keyword">by</span> title
<span class="token keyword">having</span> t <span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>解答</p>
<ol>
<li><code>count()</code> 计数；</li>
<li><code>distinct</code> 对重复值进行过滤。</li>
</ol>
</li>
</ul>
<h1 id="第十五题"><a href="#第十五题" class="headerlink" title="第十五题"></a>第十五题</h1><ul>
<li><p>题目描述</p>
<p>查找employees表所有emp_no为奇数，且last_name不为Mary(注意大小写)的员工信息，并按照hire_date逆序排列(题目不能使用mod函数)</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span>
<span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>first_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>last_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>gender<span class="token punctuation">`</span> char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">emp_no</th>
<th align="left">birth_date</th>
<th align="left">first_name</th>
<th align="left">last_name</th>
<th align="left">gender</th>
<th align="left">hire_date</th>
</tr>
</thead>
<tbody><tr>
<td align="left">10011</td>
<td align="left">1953-11-07</td>
<td align="left">Mary</td>
<td align="left">Sluis</td>
<td align="left">F</td>
<td align="left">1990-01-22</td>
</tr>
<tr>
<td align="left">10005</td>
<td align="left">1955-01-21</td>
<td align="left">Kyoichi</td>
<td align="left">Maliniak</td>
<td align="left">M</td>
<td align="left">1989-09-12</td>
</tr>
<tr>
<td align="left">10007</td>
<td align="left">1957-05-23</td>
<td align="left">Tzvetan</td>
<td align="left">Zielinski</td>
<td align="left">F</td>
<td align="left">1989-02-10</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<p>方法一：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span>
<span class="token keyword">from</span> employees
<span class="token keyword">where</span> emp_no <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> last_name <span class="token operator">!=</span> <span class="token string">'Mary'</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> hire_date <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法二：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span>
<span class="token keyword">from</span> employees
<span class="token keyword">where</span> emp_no<span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">and</span> last_name <span class="token operator">!=</span> <span class="token string">'Mary'</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> hire_date <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结</p>
<ol>
<li><p>求奇数的方法 ：取余函数 <code>mod()</code> , 运算符 <code>%</code>, 正则表达式。</p>
</li>
<li><p>奇偶数查询：<a href="https://blog.csdn.net/ccStroy/article/details/78061861">https://blog.csdn.net/ccStroy/article/details/78061861</a></p>
<p>位运算</p>
<p>奇数查询：<code>SELECT a.user_id FROM t_user_info a WHERE a.user_id&amp;1 LIMIT 5</code></p>
<p>偶数查询：<code>SELECT a.user_id FROM t_user_info a WHERE a.user_id=(a.user_id&gt;&gt;1)&lt;&lt;1 LIMIT 5</code></p>
<p>查询奇数的方法 &amp;1：1的二进制是0001，与运算符：1 &amp; 1 = 1, 1 &amp; 0 = 0, 0 &amp; 1 = 0, 0 &amp; 0 = 0；所以可以保证最后一位是奇数。</p>
<p>查询偶数的方法 字段=（字段&gt;&gt;1）&lt;&lt;1：这是左移和右移运算符，先整除再乘，意思就是先整除2再乘以2，看前后结果是否一样，一样的就是偶数。</p>
<p>正则表达式</p>
<p>查询奇数：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>idcard_num <span class="token keyword">from</span> t_user_info <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>idcard_num <span class="token operator">regexp</span> <span class="token string">'[13579]$'</span> <span class="token keyword">limit</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查询偶数</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>idcard_num <span class="token keyword">from</span> t_user_info <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>idcard_num <span class="token operator">regexp</span> <span class="token string">'[02468]$'</span> <span class="token keyword">limit</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>正则表达式复习</p>
<p><code>^aa</code> ：以 aa 为开头；</p>
<p><code>aa$</code> ：以aa结尾；</p>
<p><code>.  </code>  ：匹配任何字符；</p>
<p><code>[abc]</code>：[字符集合]，包含中括号里的字符；</p>
<p><code>[^abc]</code>：不包含中括号里的字符；</p>
<p><code>a|b|c</code> ：匹配a或b或c，（中|美）国；</p>
<p><code>*  </code>：匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}；</p>
<p><code>+</code>  ：匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}；</p>
<p><code>{n}</code>  ：n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o；</p>
<p><code>{n,m} </code>：m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</p>
</li>
</ol>
</li>
</ul>
<h1 id="第十六题"><a href="#第十六题" class="headerlink" title="第十六题"></a>第十六题</h1><ul>
<li><p>题目描述</p>
<p>统计出当前(titles.to_date=’9999-01-01’)各个title类型对应的员工当前(salaries.to_date=’9999-01-01’)薪水对应的平均工资。结果给出title以及平均工资avg。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>salary<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token string">"titles"</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>title<span class="token punctuation">`</span>     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th>title</th>
<th>avg</th>
</tr>
</thead>
<tbody><tr>
<td>Senior Engineer</td>
<td>62409.25</td>
</tr>
<tr>
<td>Senior Staff</td>
<td>88070.0</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
    <span class="token function">avg</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token string">'avg'</span>
<span class="token keyword">from</span> titles t1
<span class="token keyword">inner</span> <span class="token keyword">join</span> salaries t2
<span class="token keyword">on</span> t1<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> t2<span class="token punctuation">.</span>emp_no
<span class="token keyword">where</span> t1<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span> 
    <span class="token operator">and</span> t2<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> title<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结</p>
<ol>
<li><code>inner join</code> 左连接；</li>
<li>SQL 语句的执行顺序。</li>
</ol>
</li>
</ul>
<h1 id="第十七题"><a href="#第十七题" class="headerlink" title="第十七题"></a>第十七题</h1><ul>
<li><p>题目描述</p>
<p>获取当前（to_date=’9999-01-01’）薪水第二多的员工的emp_no以及其对应的薪水salary</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span> <span class="token punctuation">(</span>
<span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>salary<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>to_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">emp_no</th>
<th align="left">salary</th>
</tr>
</thead>
<tbody><tr>
<td align="left">10009</td>
<td align="left">94409</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<p>方法一： <code>order by</code> + <code>limit</code></p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> emp_no<span class="token punctuation">,</span>
        salary
<span class="token keyword">from</span> salaries
<span class="token keyword">where</span> to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span>
<span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法二：先进行排序，再获取排名第二的</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span>
        t1<span class="token punctuation">.</span>salary
<span class="token keyword">from</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>
        row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span><span class="token punctuation">)</span> r
    <span class="token keyword">from</span> salaries
    <span class="token punctuation">)</span> t1
<span class="token keyword">where</span> t1<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法三</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> emp_no<span class="token punctuation">,</span> salary
<span class="token keyword">FROM</span> salaries
<span class="token keyword">WHERE</span> salary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary
                <span class="token keyword">FROM</span> salaries
                <span class="token keyword">WHERE</span> to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span>
                <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> salary
                <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> salary <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这种先是对 salary 进行去重，排序，最后取第二高的。（<code>group by</code> 也有去重的作用）</p>
</li>
<li><p>总结</p>
<ol>
<li>获取第几的问题，可以用 <code>limit</code> 进行获取；但是对于含有重复项的排名，一般先对其进行排名再进行数据获取。</li>
</ol>
</li>
</ul>
<h1 id="第十八题"><a href="#第十八题" class="headerlink" title="第十八题"></a>第十八题</h1><ul>
<li><p>题目描述</p>
<p>查找当前薪水(to_date=’9999-01-01’)排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，<u>你可以不使用order by完成吗?</u></p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>     <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span> <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gender<span class="token punctuation">`</span>     char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span>  <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>salary<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">emp_no</th>
<th align="left">salary</th>
<th align="left">last_name</th>
<th align="left">first_name</th>
</tr>
</thead>
<tbody><tr>
<td align="left">10009</td>
<td align="left">94409</td>
<td align="left">Peac</td>
<td align="left">Sumant</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>
       t1<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>
       t1<span class="token punctuation">.</span>first_name
<span class="token keyword">from</span> employees t1
         <span class="token keyword">left</span> <span class="token keyword">join</span> salaries t2
                   <span class="token keyword">on</span> t1<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> t2<span class="token punctuation">.</span>emp_no
<span class="token keyword">where</span> t2<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>
    <span class="token keyword">from</span> salaries t3
    <span class="token keyword">where</span> t3<span class="token punctuation">.</span>salary <span class="token operator">!=</span> <span class="token punctuation">(</span>
        <span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>
        <span class="token keyword">from</span> salaries
        <span class="token keyword">where</span> to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span>
    <span class="token punctuation">)</span>
      <span class="token operator">and</span> t3<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span>
<span class="token punctuation">)</span>
  <span class="token operator">and</span> t2<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解题思路：</p>
<p>先把最大的出来并将其过滤掉，寻找剩余里面最大的 (也就越是第二大的)，找出第二大的后，就可以用 <code>where</code> 进行条件过了。</p>
</li>
</ul>
<h1 id="第十九题"><a href="#第十九题" class="headerlink" title="第十九题"></a>第十九题</h1><ul>
<li><p>题目描述</p>
<p>查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>departments<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span>   char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>dept_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept_emp<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span>   char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>     <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span> <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gender<span class="token punctuation">`</span>     char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span>  <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">last_name</th>
<th align="left">first_name</th>
<th align="left">dept_name</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Facello</td>
<td align="left">Georgi</td>
<td align="left">Marketing</td>
</tr>
<tr>
<td align="left">省略</td>
<td align="left">省略</td>
<td align="left">省略</td>
</tr>
<tr>
<td align="left">Sluis</td>
<td align="left">Mary</td>
<td align="left">NULL</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<p>方法一：运用子查询</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>  t4<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>
        t4<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>
        t3<span class="token punctuation">.</span>dept_name
<span class="token keyword">from</span> employees t4
<span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span>
            <span class="token keyword">select</span> emp_no <span class="token punctuation">,</span> 
                    dept_name 
            <span class="token keyword">from</span> dept_emp t1
            <span class="token keyword">left</span> <span class="token keyword">join</span> departments t2
            <span class="token keyword">on</span> t1<span class="token punctuation">.</span>dept_no <span class="token operator">=</span> t2<span class="token punctuation">.</span>dept_no
        <span class="token punctuation">)</span> t3
<span class="token keyword">on</span> t4<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> t3<span class="token punctuation">.</span>emp_no<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解题思路：</p>
<p>先将两个表进行 <code>left join</code> 连接，再用第三各表连接进行连接</p>
<p>方法二：三表连接（注意连接时的条件）</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>last_name<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>first_name<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dept_name
<span class="token keyword">from</span> employees <span class="token number">e</span> <span class="token keyword">left</span> <span class="token keyword">join</span> dept_emp <span class="token number">de</span> <span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>emp_no<span class="token operator">=</span><span class="token number">de</span><span class="token punctuation">.</span>emp_no
<span class="token keyword">left</span> <span class="token keyword">join</span> departments <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">de</span><span class="token punctuation">.</span>dept_no<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>dept_no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<ul>
<li><p>总结</p>
<ol>
<li>灵活运用子查询。</li>
<li>运用方法二的时候，自己第一次老是想着用第一个的字段和第三个表的字段设置连接条件，事实证明，第二个表和第三个表的字段也可以作为连接的条件。</li>
</ol>
</li>
</ul>
<h1 id="第二十题"><a href="#第二十题" class="headerlink" title="第二十题"></a>第二十题</h1><ul>
<li><p>题目描述</p>
<p>查找员工编号emp_no为10001其自入职以来的薪水salary涨幅(总共涨了多少)growth(可能有多次涨薪，没有降薪)</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span> <span class="token punctuation">(</span>
<span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>salary<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">`</span>to_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">growth</th>
</tr>
</thead>
<tbody><tr>
<td align="left">28841</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<p>方法一：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> growth
<span class="token keyword">from</span> salaries
<span class="token keyword">where</span> emp_no <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>方法二：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> growth
<span class="token keyword">from</span> salaries
<span class="token keyword">group</span> <span class="token keyword">by</span> emp_no
<span class="token keyword">having</span> emp_no <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>参考</p>
<ul>
<li>题目来源<a href="https://www.nowcoder.com/ta/sql">牛客网: 数据库SQL实战</a> </li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
  </entry>
  <entry>
    <title>牛客网SQL实战|Day 1</title>
    <url>/2020/09/15/niu-ke-wang-sql-shi-zhan-day-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Day one</p>
<a id="more"></a>

<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200915234535.jpg" alt="little">

<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><table>
<thead>
<tr>
<th>题号</th>
<th>知识点</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><code>max()</code> 函数 / 日期大小比较</td>
</tr>
<tr>
<td>2</td>
<td>开窗排序函数 / <code>limt</code> 用法</td>
</tr>
<tr>
<td>3</td>
<td><code>left join</code> 连接表</td>
</tr>
<tr>
<td>4</td>
<td><code>inner join</code> 连接表</td>
</tr>
<tr>
<td>5</td>
<td><code>left join</code> 连接表</td>
</tr>
<tr>
<td>6</td>
<td><code>left join</code>/ 并列查询/ <code>ORDER BY</code> 逆序排列</td>
</tr>
<tr>
<td>7</td>
<td><code>distinct</code> 去重 / <code>count()</code> 计数</td>
</tr>
<tr>
<td>8</td>
<td><code> distinct</code> 与 <code>group by</code> 都可以去重 / 语句执行的顺序</td>
</tr>
<tr>
<td>9</td>
<td><code>inner join</code>  / 并列查询与 <code>where</code> 相结合</td>
</tr>
<tr>
<td>10</td>
<td><code>not in</code>  与子查询 / <code>left join</code> 与<code> is null</code></td>
</tr>
</tbody></table>
<h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><ul>
<li><p>题目描述</p>
<p>查找最晚入职员工的所有信息，为了减轻入门难度，目前所有的数据里员工入职的日期都不是同一天(sqlite里面的注释为–,mysql为comment)</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>     <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- '员工编号'</span>
    <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span> <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gender<span class="token punctuation">`</span>     char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span>  <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">emp_no</th>
<th align="left">birth_date</th>
<th align="left">first_name</th>
<th align="left">last_name</th>
<th align="left">gender</th>
<th align="left">hire_date</th>
</tr>
</thead>
<tbody><tr>
<td align="left">10008</td>
<td align="left">1958-02-19</td>
<td align="left">Saniya</td>
<td align="left">Kalloufi</td>
<td align="left">M</td>
<td align="left">1994-09-15</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> emp_no<span class="token punctuation">,</span>
       birth_date<span class="token punctuation">,</span>
       first_name<span class="token punctuation">,</span>
       last_name<span class="token punctuation">,</span>
       gender<span class="token punctuation">,</span>
       hire_date
<span class="token keyword">from</span> employees
<span class="token keyword">where</span> hire_date <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>hire_date<span class="token punctuation">)</span>
    <span class="token keyword">from</span> employees
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结</p>
<ol>
<li>使用 <code>where</code> 进行条件过滤, </li>
<li>使用 <code>max()</code> 对日期格式的字段取最大值时, 距离当前时间越久，就是<code>max()</code> 求得结果。</li>
</ol>
</li>
</ul>
<h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><ul>
<li><p>题目描述</p>
<p>查找入职员工时间排名倒数第三的员工所有信息，为了减轻入门难度，目前所有的数据里员工入职的日期都不是同一天</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>     <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span> <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gender<span class="token punctuation">`</span>     char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span>  <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="center">emp_no</th>
<th align="center">birth_date</th>
<th align="center">first_name</th>
<th align="center">last_name</th>
<th align="center">gender</th>
<th align="center">hire_date</th>
</tr>
</thead>
<tbody><tr>
<td align="center">10005</td>
<td align="center">1955-01-21</td>
<td align="center">Kyoichi</td>
<td align="center">Maliniak</td>
<td align="center">M</td>
<td align="center">1989-09-12</td>
</tr>
</tbody></table>
</li>
<li><p>解答<br>方法一：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span>
       t1<span class="token punctuation">.</span>birth_date<span class="token punctuation">,</span>
       t1<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>
       t1<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>
       t1<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>
       t1<span class="token punctuation">.</span>hire_date
<span class="token keyword">from</span> <span class="token punctuation">(</span>
         <span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>
                row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> hire_date <span class="token keyword">desc</span><span class="token punctuation">)</span> r
         <span class="token keyword">from</span> employees
     <span class="token punctuation">)</span> t1
<span class="token keyword">where</span> t1<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法二：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span>
<span class="token keyword">from</span> employees
<span class="token keyword">order</span> <span class="token keyword">by</span> hire_date <span class="token keyword">desc</span>
<span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结</p>
<ol>
<li><p>可以使用开窗函数 <code>row_number()</code>、<code>dense_rank()</code>、<code>rank() </code> 先进行排序，在进行查询</p>
</li>
<li><p>先对字段进行排序<code>order by</code>, 再结合<code> limit</code> 获取第三行数据。</p>
<p><code>order by </code> 默认排序方式 <code>ASC</code> 升序；</p>
<p><code>limit [offset,] rows | rows  </code> :是两个参数，第一个是偏移量，第二个是数目</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回4-11行</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回第4行</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回前3行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
</ul>
<h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><ul>
<li><p>题目描述</p>
<p>查找各个部门当前(dept_manager.to_date=’9999-01-01’)领导当前(salaries.to_date=’9999-01-01’)薪水详情以及其对应部门编号dept_no</p>
<p>(注:请以salaries表为主表进行查询，输出结果以salaries.emp_no升序排序，并且请注意输出结果里面dept_no列是最后一列)</p>
<blockquote>
<p>题目描述有点没看懂</p>
</blockquote>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- '员工编号',</span>
    <span class="token punctuation">`</span>salary<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept_manager<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span> char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- '部门编号'</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>  <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">--  '员工编号'</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">emp_no</th>
<th align="left">salary</th>
<th align="left">from_date</th>
<th align="left">to_date</th>
<th align="left">dept_no</th>
</tr>
</thead>
<tbody><tr>
<td align="left">10002</td>
<td align="left">72527</td>
<td align="left">2001-08-02</td>
<td align="left">9999-01-01</td>
<td align="left">d001</td>
</tr>
<tr>
<td align="left">10004</td>
<td align="left">74057</td>
<td align="left">2001-11-27</td>
<td align="left">9999-01-01</td>
<td align="left">d004</td>
</tr>
<tr>
<td align="left">10005</td>
<td align="left">94692</td>
<td align="left">2001-09-09</td>
<td align="left">9999-01-01</td>
<td align="left">d003</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span>
        t1<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>
        t1<span class="token punctuation">.</span>from_date<span class="token punctuation">,</span>
        t1<span class="token punctuation">.</span>to_date<span class="token punctuation">,</span>
        t2<span class="token punctuation">.</span>dept_no
<span class="token keyword">from</span> salaries t1
         <span class="token keyword">left</span> <span class="token keyword">join</span> dept_manager t2
                   <span class="token keyword">on</span> t1<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> t2<span class="token punctuation">.</span>emp_no
<span class="token keyword">where</span> t1<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span><span class="token operator">and</span> t2<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> t1<span class="token punctuation">.</span>emp_no <span class="token keyword">asc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结</p>
<ol>
<li><p>使用 <code>left join</code>  将两表进行连接，<code>where</code> 进行条件过滤。</p>
</li>
<li><p>关于 <code>left join</code>, <code>right join</code>, <code>inner join</code> 得区别：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200915234726.png" alt="20190609110535905" style="zoom:150%;">

<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200915234731.png" alt="dyqnzpuddxk21" style="zoom:80%;">

</li>
</ol>
</li>
</ul>
<h1 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h1><ul>
<li><p>题目描述</p>
<p>查找所有已经分配部门的员工的last_name和first_name以及dept_no(请注意输出描述里各个列的前后顺序)</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept_emp<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span>   char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>     <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span> <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gender<span class="token punctuation">`</span>     char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span>  <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">last_name</th>
<th align="left">first_name</th>
<th align="left">dept_no</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Facello</td>
<td align="left">Georgi</td>
<td align="left">d001</td>
</tr>
<tr>
<td align="left">省略</td>
<td align="left">省略</td>
<td align="left">省略</td>
</tr>
<tr>
<td align="left">Piveteau</td>
<td align="left">Duangkaew</td>
<td align="left">d006</td>
</tr>
</tbody></table>
<p>？？？？不过滤 空值？？？？</p>
</li>
<li><p>解答</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t2<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>
       t1<span class="token punctuation">.</span>dept_no
<span class="token keyword">from</span> dept_emp t1
<span class="token keyword">inner</span> <span class="token keyword">join</span> employees t2
<span class="token keyword">on</span> t1<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> t2<span class="token punctuation">.</span>emp_no<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结：</p>
<ol>
<li>内连接 <code>inner</code>。</li>
</ol>
</li>
</ul>
<h1 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h1><ul>
<li><p>题目描述</p>
<p>查找所有员工的last_name和first_name以及对应部门编号dept_no，也包括暂时没有分配具体部门的员工(请注意输出描述里各个列的前后顺序)</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept_emp<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span>   char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>     <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span> <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gender<span class="token punctuation">`</span>     char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span>  <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">last_name</th>
<th align="left">first_name</th>
<th align="left">dept_no</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Facello</td>
<td align="left">Georgi</td>
<td align="left">d001</td>
</tr>
<tr>
<td align="left">省略</td>
<td align="left">省略</td>
<td align="left">省略</td>
</tr>
<tr>
<td align="left">Sluis</td>
<td align="left">Mary</td>
<td align="left">NULL(在sqlite中此处为空,MySQL为NULL)</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>
       t1<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>dept_no
<span class="token keyword">from</span> employees t1
         <span class="token keyword">left</span> <span class="token keyword">join</span> dept_emp t2
                   <span class="token keyword">on</span> t1<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> t2<span class="token punctuation">.</span>emp_no<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结</p>
<ol>
<li>表的左连接；</li>
</ol>
</li>
</ul>
<h1 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h1><ul>
<li><p>题目描述</p>
<p>查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序(请注意，一个员工可能有多次涨薪的情况)</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>     <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span> <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gender<span class="token punctuation">`</span>     char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span>  <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>salary<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">emp_no</th>
<th align="left">salary</th>
</tr>
</thead>
<tbody><tr>
<td align="left">10011</td>
<td align="left">25828</td>
</tr>
<tr>
<td align="left">省略</td>
<td align="left">省略</td>
</tr>
<tr>
<td align="left">10001</td>
<td align="left">60117</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> 
       t2<span class="token punctuation">.</span>salary 
<span class="token keyword">from</span> employees t1
<span class="token keyword">left</span> <span class="token keyword">join</span> salaries t2
<span class="token keyword">on</span> t1<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> t2<span class="token punctuation">.</span>emp_no
<span class="token keyword">where</span> t1<span class="token punctuation">.</span>hire_date <span class="token operator">=</span> t2<span class="token punctuation">.</span>from_date
<span class="token keyword">order</span> <span class="token keyword">by</span> t1<span class="token punctuation">.</span>emp_no <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结</p>
<ol>
<li>表的左连接。</li>
</ol>
</li>
</ul>
<h1 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h1><ul>
<li><p>题目描述</p>
<p>查找薪水变动超过15次的员工号emp_no以及其对应的变动次数t</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>salary<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">emp_no</th>
<th align="left">t</th>
</tr>
</thead>
<tbody><tr>
<td align="left">10001</td>
<td align="left">17</td>
</tr>
<tr>
<td align="left">10004</td>
<td align="left">16</td>
</tr>
<tr>
<td align="left">10009</td>
<td align="left">18</td>
</tr>
</tbody></table>
</li>
<li><p>解答<br>方法一：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> emp_no<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> salary<span class="token punctuation">)</span> t
<span class="token keyword">from</span> salaries
<span class="token keyword">group</span> <span class="token keyword">by</span> emp_no
<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> salary<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法二：</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span>
        t1<span class="token punctuation">.</span>t
<span class="token keyword">from</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> emp_no<span class="token punctuation">,</span>
           <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> salary<span class="token punctuation">)</span> t
    <span class="token keyword">from</span> salaries
    <span class="token keyword">group</span> <span class="token keyword">by</span> emp_no 
    <span class="token punctuation">)</span>t1
<span class="token keyword">where</span> t1<span class="token punctuation">.</span>t <span class="token operator">></span><span class="token number">15</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>扩展</p>
<p>严格意义上的工资涨幅</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> t
<span class="token keyword">from</span> salaries <span class="token number">a</span>
<span class="token keyword">inner</span> <span class="token keyword">join</span> salaries <span class="token number">b</span>
<span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>emp_no <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>emp_no <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>from_date
<span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>salary <span class="token operator">&lt;</span> <span class="token number">b</span><span class="token punctuation">.</span>salry
<span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>emp_no
<span class="token keyword">having</span> t <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结</p>
<ol>
<li><p>分组+聚合函数</p>
</li>
<li><p><code>count() </code> 在进行计算的时候：</p>
<p><code>count()</code> <strong>会忽略列值为空。</strong> </p>
<p><code>count(列名)</code> 只包括列名那一列，在统计结果的时候，<strong>会忽略列值为空。</strong></p>
<p><code>count(*)</code>包括了所有的列，相当于行数，在统计结果的时候，<strong>不会忽略列值为NULL。</strong></p>
<p><code>count(1)</code>包括了忽略所有列，用1代表代码行，在统计结果的时候，<strong>不会忽略列值为NULL。</strong></p>
</li>
</ol>
</li>
</ul>
<h1 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h1><ul>
<li><p>题目描述</p>
<p>找出所有员工当前(to_date=’9999-01-01’)具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>salary<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">salary</th>
</tr>
</thead>
<tbody><tr>
<td align="left">94692</td>
</tr>
<tr>
<td align="left">94409</td>
</tr>
<tr>
<td align="left">88958</td>
</tr>
</tbody></table>
</li>
<li><p>解答<br>方法一：<code>distinct</code>+ <code>order by</code></p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> salary
<span class="token keyword">from</span> salaries 
<span class="token keyword">where</span> to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法二：<code>distinct</code>+<code>order by</code>+ <code>group by</code></p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> salary
<span class="token keyword">from</span> salaries
<span class="token keyword">where</span> to_date<span class="token operator">=</span><span class="token string">'9999-01-01'</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> salary
<span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<ul>
<li><p>总结</p>
<ol>
<li><p>一下查询语句的用法，</p>
<p><code>distinct</code> : 去除重复值；</p>
<p><code>order by</code>:  排序。</p>
</li>
<li><p><code>WHERE</code>语句在<code>GROUP BY</code>语句之前，SQL会在分组之前计算<code>WHERE</code>语句。<code>HAVING</code>语句在<code>GROUP BY</code>语句之后，SQL会在分组之后计算<code>HAVING</code>语句。</p>
</li>
<li><p>对于<code>distinct</code>与<code>group by</code>的使用：</p>
<ul>
<li>当对系统的性能高并且数据量大时使用<code>group by</code></li>
<li>当对系统的性能不高时或者使用数据量少时两者借口</li>
<li>尽量使用<code>group by</code> </li>
</ul>
</li>
</ol>
</li>
</ul>
<h1 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h1><ul>
<li><p>题目描述</p>
<p>获取所有部门当前(dept_manager.to_date=’9999-01-01’)manager的当前(salaries.to_date=’9999-01-01’)薪水情况，给出dept_no, emp_no以及salary(请注意，同一个人可能有多条薪水情况记录)</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept_manager<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span>   char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>salary<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">dept_no</th>
<th align="left">emp_no</th>
<th align="left">salary</th>
</tr>
</thead>
<tbody><tr>
<td align="left">d001</td>
<td align="left">10002</td>
<td align="left">72527</td>
</tr>
<tr>
<td align="left">d004</td>
<td align="left">10004</td>
<td align="left">74057</td>
</tr>
<tr>
<td align="left">d003</td>
<td align="left">10005</td>
<td align="left">94692</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<p>方法一：<code>INNER JOIN</code></p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>dept_no<span class="token punctuation">,</span>
        t1<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span>
        t2<span class="token punctuation">.</span>salary
<span class="token keyword">from</span> dept_manager t1
<span class="token keyword">inner</span> <span class="token keyword">join</span> salaries t2
<span class="token keyword">on</span> t1<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> t2<span class="token punctuation">.</span>emp_no
<span class="token keyword">where</span> t1<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span> <span class="token operator">and</span> t2<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">"9999-01-01"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法二：用<code>WHERE</code>限定语句</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">d</span><span class="token punctuation">.</span>dept_no<span class="token punctuation">,</span> 
        <span class="token number">d</span><span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> 
        s<span class="token punctuation">.</span>salary
<span class="token keyword">FROM</span> dept_manager <span class="token keyword">AS</span> <span class="token number">d</span><span class="token punctuation">,</span> salaries <span class="token keyword">AS</span> s
<span class="token keyword">WHERE</span> <span class="token number">d</span><span class="token punctuation">.</span>emp_no <span class="token operator">=</span> s<span class="token punctuation">.</span>emp_no
    <span class="token operator">AND</span> <span class="token number">d</span><span class="token punctuation">.</span>to_date <span class="token operator">=</span> s<span class="token punctuation">.</span>to_date
    <span class="token operator">AND</span> <span class="token number">d</span><span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">'9999-01-01'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结</p>
<p>要灵活的使用表的连接和限定语句。</p>
</li>
</ul>
<h1 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h1><ul>
<li><p>题目描述</p>
<p>获取所有非manager的员工emp_no</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept_manager<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span>   char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>to_date<span class="token punctuation">`</span>   <span class="token keyword">date</span>    <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span>     <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span> <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>first_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>last_name<span class="token punctuation">`</span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gender<span class="token punctuation">`</span>     char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span>  <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>输出描述</p>
<table>
<thead>
<tr>
<th align="left">emp_no</th>
</tr>
</thead>
<tbody><tr>
<td align="left">10001</td>
</tr>
<tr>
<td align="left">10003</td>
</tr>
<tr>
<td align="left">10007</td>
</tr>
<tr>
<td align="left">10008</td>
</tr>
<tr>
<td align="left">10009</td>
</tr>
<tr>
<td align="left">10011</td>
</tr>
</tbody></table>
</li>
<li><p>解答</p>
<p>方法一：<code>LEFT JOIN</code>左连接+<code>IS NULL</code></p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t2<span class="token punctuation">.</span>emp_no
<span class="token keyword">from</span> dept_manager t1
         <span class="token keyword">right</span> <span class="token keyword">join</span> employees t2
                    <span class="token keyword">on</span> t1<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> t2<span class="token punctuation">.</span>emp_no
<span class="token keyword">where</span> t1<span class="token punctuation">.</span>dept_no <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样的数据和查询语句，在牛客网上运行显示错误，把数据放到自己电脑上，用上面的语句进行查询，结果对比完全一样 :sweat: </p>
<p>方法二：<code>NOT IN</code>+子查询</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> emp_no
<span class="token keyword">from</span> employees
<span class="token keyword">where</span> emp_no <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> emp_no <span class="token keyword">from</span> dept_manager<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>总结</p>
<ol>
<li>表的连接</li>
</ol>
</li>
</ul>
<p>参考</p>
<ul>
<li>题目来源<a href="https://www.nowcoder.com/ta/sql">牛客网: 数据库SQL实战</a> </li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
  </entry>
  <entry>
    <title>Excel:LOOKUP函数用法！</title>
    <url>/2020/09/14/excel-lookup-han-shu-yong-fa/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>使用VLOOKUP函数的时候，经常都会遇到一些麻烦事，那就是VLOOKUP查找只找到满足条件的第一个值就不找了，并且还只能从左往右查找，太多限制了。LOOKUP函数，可以完美的解决这两个问题，太好用了！</p>
<p>LOOKUP函数非常强大，有引用函数之王的称号。要想完全掌握它，必须了解它的5种常见用法和它的二分法查找原理。</p>
<a id="more"></a>

<h1 id="常规引用"><a href="#常规引用" class="headerlink" title="常规引用"></a>常规引用</h1><p>格式：LOOKUP（查找值，查找区域）</p>
<p>例1：根据姓名查找语文成绩，公式为<code>=LOOKUP(H2,C2:D19)</code></p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141614.png" alt="20180706113315661001" style="zoom:80%;">

<p>例2：根据姓名查找英语成绩，公式为：<code>=LOOKUP(H2,C2:F19)</code></p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141621.png" alt="20180706113316770002" style="zoom:80%;">

<p>通过这两个例子我们可以发现，LOOKUP在进行查找时公式的结构非常简单，<strong>查找值和要找的结果分别位于查找区域的首列和末列。</strong></p>
<p>但是仅仅了解这个用法是远远不够的，如果我们再试一个数据的话，有可能就会发现问题：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141626.png" alt="20180706113316228003" style="zoom:80%;">

<p>当查找姓名变成赵永福的时候，结果就不对了，这是因为<strong>LOOKUP**</strong>函数使用的是二分法查找**，也就是模糊匹配。</p>
<p>因此，在使用LOOKUP进行常规查找的时候，有一个非常重要的步骤，就是按照查找内容（姓名所在的c列）<strong>升序排序</strong>。</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914142058.png" alt="20180706113317304004" style="zoom:80%;">

<p>当我们排序以后，公式的结果立刻变成了正确的，是不是很神奇！</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914142053.png" alt="20180706113317822005" style="zoom:80%;">

<p>这又引出了一个新的问题，如果数据不能排序的话，LOOKUP函数还能用吗？</p>
<p>肯定能用啊，下面来看看LOOKUP函数的第二种用法。</p>
<h1 id="精确查找的套路"><a href="#精确查找的套路" class="headerlink" title="精确查找的套路"></a><strong>精确查找的套路</strong></h1><p>格式：=LOOKUP（1,0/(查找范围=查找值),结果范围）</p>
<p>在I2单元格输入公式：<code>=LOOKUP(1,0/(C2:C19=H2)，D2:D19)</code>,</p>
<p>回车，可看到正确结果。</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914142046.png" alt="20180706113318909006" style="zoom:80%;">

<p>关于这个套路的1和0/到底是什么意思，也是提问率最高的问题之一，在未讲解二分法原理之前，简单来说一下公式的意思。1就是要查找的值，但是条件变了，不是直接查找姓名，而是根据姓名得到的一组逻辑值：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914142040.png" alt="20180706113319722007" style="zoom:80%;">

<p>注意这里只有一个TRUE，也就是我们要找的姓名。</p>
<p>接下来用0除以这些逻辑值，在进行计算的时候逻辑值TRUE代表1，FALSE代表0，当分母为0也就是FALSE的时候，计算结果是错误值：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914142034.jpg" alt="20180706113319379008" style="zoom:80%;">

<p>因此，LOOKUP的工作就变成了在一组数据中找1。由于这组数据只有一个0，其他都是错误值，<strong>二分法使得</strong> <strong>LOOKUP</strong> <strong>只能找到不大于查找值的最后一个数字</strong>，因此只能找到0，最后根据0的行位置（第2行）得到第三参数对应位置的数据，即D2就是我们需要的结果。</p>
<p>当对数组和逻辑值这两大要点掌握比较熟练的时候，这些内容就很好理解了。目前如果不能完全理解，记住这个套路就行：**<code>=LOOKUP（1,0/(查找范围=查找值),结果范围）</code>**。同时这个套路还能延伸出多条件精确查找用法：</p>
<p><code>=LOOKUP（1,0/((查找范围1=查找值1)* (查找范围2=查找值2)* (查找范围3=查找值3)),结果范围）</code></p>
<p>就是在每个查找范围内找到要找的值，得到的逻辑值相乘后同时符合多个条件的位置就是1，原理与单条件的一样。</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914142025.png" alt="20180706113319291009" style="zoom:80%;">

<h1 id="反向查找的套路"><a href="#反向查找的套路" class="headerlink" title="反向查找的套路"></a>反向查找的套路</h1><p>与我们熟知的VLOOKUP不同，使用LOOKUP函数进行反向查找时非常简单，</p>
<p>公式结构为：**<code>=LOOKUP（查找值，查找列，结果列）</code>**，</p>
<p>下面这个例子是按照姓名排序后再反向查找的效果：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914142020.png" alt="20180706113319479010" style="zoom:80%;">



<p>如果数据不能排序的话，使用精确查找的套路：<code>=LOOKUP(1,0/(C2:C19=H8),B2:B19)</code></p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914142014.png" alt="20180706113320897011" style="zoom:80%;">

<h1 id="按区间查找的套路"><a href="#按区间查找的套路" class="headerlink" title="按区间查找的套路"></a>按区间查找的套路</h1><p>据学生的总分给出相应的评语。50分以下的为“很差”，50-100分的为“差”，100-150分的为“一般”，150-200分的为“较好”，200-250分的为“优秀”，250分及以上的为“能手”。</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914142009.png" alt="20180706113320113012" style="zoom:80%;">

<p>这里用的公式为：</p>
<p><code>=LOOKUP(G2,{0,50,100,150,200,250;"很差","差","一般","较好","优秀","能手"})</code></p>
<p>按照评语的要求分成了六个等级，如果用if函数去做就很啰嗦，使用LOOKUP处理这类问题非常方便，公式结构也很简单：</p>
<p><code>=LOOKUP（分数值，{下限1, 下限2……;评语1,评语2……}）</code></p>
<p>在写这个公式的时候注意两点：</p>
<ol>
<li>LOOKUP的第二参数使用了常量<u>数组</u>，这里的大括号是手动输入的，括号内用一个分号分开，左边是每个等级的下限，例如50分以下这个表述里下限就是0，50-100的下限就是50，以此类推，每个数字之间用逗号分开；分号右边是对应的评语，评语应当使用引号，同时用逗号分开（公式里的所有符号都是英文状态下的）；</li>
<li>数字区间应当遵循升序的排列顺序，否则结果就会错误。</li>
</ol>
<h1 id="关于数据排序的重要性"><a href="#关于数据排序的重要性" class="headerlink" title="关于数据排序的重要性"></a>关于数据排序的重要性</h1><img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914142003.png" alt="20180706113320685013" style="zoom:67%;">

<p>当我们按照学号查找姓名的时候，发现会出现错误，学号也是按升序排列的啊，怎么会错？</p>
<p>这是一种最常见的错误，这里的学号升序排列只是我们感觉如此而已，实际上升序的效果是这样的：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141958.png" alt="20180706113321188014" style="zoom:67%;">

<p>在使用LOOKUP的时候，如果不使用精确查找的套路，切记一定要排序才能保证公式结果的正确性。</p>
<h1 id="二分法原理"><a href="#二分法原理" class="headerlink" title="二分法原理"></a>二分法原理</h1><p>按序号查找成绩，序号是升序排列的，公式<code>=LOOKUP(J2,A2:D19)</code>的结果正确。</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141952.png" alt="20180707144605964001" style="zoom:67%;">

<h2 id="二分法查找原理"><a href="#二分法查找原理" class="headerlink" title="二分法查找原理"></a>二分法查找原理</h2><p>二分法查找是把查找范围中的数据按照个数一分为二找到位于中间位置的一个数据，中间值，然后用我们的查找值和中间值做比较。当中间值等于查找值时，直接去获取结果；当中间值小于查找值时，则向下继续进行二分法查找比较（也就是在不含中间值在内的下方的那一半数据中继续进行二分法查找）；当中间值大于查找值时，则向上继续进行二分法查找比较（也就是在不含中间值在内的上方的那一半数据中继续进行二分法查找）。如果如此二分到最后一个数据都未找到等于查找值的数据：最后一个数据小于查找值的，那就以最后一个数据的位置去获取结果值；最后一个数据大于查找值的，那就再向上找一个位置最靠近最后一个数据的小于或等于查找值的数据，再以这个数据的位置去获取结果。</p>
<p>结合上面的例子，具体看看如何通过序号5，找到语文成绩79的。</p>
<p>第一次比较：查找范围<code>A2~A19一共18个数据，中间位置是18÷2=9，即中间值是A10单元格的9。显然查找值5小于9，所以继续向上在A2~A9</code>中查找；</p>
<p>提示：*如果查找范围数据个数是单数，中间位置就是（个数+1）÷2，例如11行的话，中间位置就是（11+1）÷2=6；如果数据个数是偶数，中间位置就是（个数）÷2。</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141945.png" alt="20180707144605830002 (1)" style="zoom:80%;">

<p>第二次比较：只有8个数据，中间位置是8÷2=4，中间值是A5单元格的4，查找值5大于4，所以继续向下在A6~A9中找。注意此时下面只有四个数，第一次查找时直接将9下面的数据都排除了。</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141941.png" alt="20180707144605971003" style="zoom:67%;">

<p>第三次比较：4个数据，中间值是A7的6，查找值5小于6，所以向上找。此时只剩下一个数据A6单元格的5，与查找值一致，因此就得到5所对应的D列数据79。</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141934.png" alt="20180707144605130004" style="zoom:67%;">



<h1 id="LOOKUP实现数据的四舍五入"><a href="#LOOKUP实现数据的四舍五入" class="headerlink" title="LOOKUP实现数据的四舍五入"></a>LOOKUP实现数据的四舍五入</h1><p>用LOOKUP解决了一个四舍五入的问题</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141929.png" alt="20180707144607014010" style="zoom:67%;">

<p>原来这个公式是用LOOKUP函数将一个数字百位以下全部舍去，实现了百分位取整。</p>
<p>在了解过二分法原理以后，是时候让LOOKUP还大家一个解释了。首先说明<code>ROW（A:A）*100</code>这部分。它其实就是得到了一组数字。为了让大家看明白，把 A:A 范围给小一点，用<code>=ROW(A1:A31)*100</code>作说明：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141924.jpg" alt="20180707144607494011" style="zoom:80%;">

<p>虽然单元格中只能看到一个100，实际上是31个数字，我们可以用f9功能键来看看具体内容：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141920.jpg" alt="20180707144607259012" style="zoom: 80%;">

<p>ROW函数用于获取单元格的行号，<code>ROW(A1:A31)*100</code>就是用A1到A31单元格的行号分别乘以100，得到一组百位取整的数据{100;200;300;……3000;3100}。</p>
<p>然后LOOKUP上场了。它要在上述得到的已经百位取整的数组中查找A1。因为数组是按升序排列的，所以查找A1的实质就是在数组中找**<u>小于等于A1的最大值</u>**。</p>
<p>以2517.32为例，唯有2500是小于它的最大值，因此结果就是2500。有兴趣的朋友可以自己用二分法原理去试试，看看对不对。</p>
<p>其他数字的查找方式都是如此。这个公式之所以巧妙，就是把一个四舍五入的问题变成了查找引用的问题，真是妙！</p>
<h1 id="LOOKUP进行数据提取"><a href="#LOOKUP进行数据提取" class="headerlink" title="LOOKUP进行数据提取"></a>LOOKUP进行数据提取</h1><p>原题如图所示提取学号：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141855.png" alt="20180707144608427014" style="zoom:67%;">

<p>用上图的第一个数据来解释。在N1单元格中输入“10张勇a”，然后在O1单元格中输入公式<code>=-LOOKUP(1,-LEFT(N1,ROW(1:9)))</code>提取学号。</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141850.jpg" alt="20180707144608499015" style="zoom:67%;">

<p>LOOKUP不是引用函数吗，怎么又可以提取数字了？</p>
<p>LEFT函数的第二个参数使用了一个数组，ROW(1:9)相当于{1;2;3;4;5;6;7;8;9}。LEFT是把第一参数指定的数据从左边开始提取，提取的长度由第二参数来确定。 LEFT按照数组{1;2;3;4;5;6;7;8;9}提取，得到9个结果：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141845.jpg" alt="20180707144608966016" style="zoom:67%;">

<p>也就是从左边开始提取1位，2位……一直到9位。因为LEFT提取的结果都是文本类型，在LEFT前面加上负号，就可以把其中的文本型数字转为数值，文字变成错误值：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141840.jpg" alt="20180707144608831017" style="zoom:67%;">

<p>错误值被LOOKUP忽略，现在就变成了在{-1; -10}中找1。1比这组数据都大，<u><strong>根据二分法查找原理，二分后只能向下找，直到最后一位小于1的数据</strong></u>。因此，我们可以简单理解成：<u>当查找值大于查找范围中所有数据（不管是否是升序排列）时，LOOKUP的实质就是在找最后一个数据。</u></p>
<p>其实将公式中的1变成0也是可以的，因为0也比所有的负数大：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141835.jpg" alt="20180707144608301018" style="zoom:67%;">

<p>当前最后一个数是-10，所以我们在LOOKUP前面再加个负号，就变成10了，也就是我们需要提取的数字。</p>
<h1 id="LOOKUP-与合并单元格"><a href="#LOOKUP-与合并单元格" class="headerlink" title="LOOKUP()与合并单元格"></a>LOOKUP()与合并单元格</h1><p>原始格式</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141828.png" alt="image-20200914140801692" style="zoom:67%;">

<p>在 C 列分别显示对应的第一列的名称：</p>
<p>公式：<code>=LOOKUP("座",$A$1:A1)</code></p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141823.png" alt="image-20200914141031170" style="zoom:67%;">

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://www.itblw.com/graphic/139fcf04c051737b903bf13d4fbd1e8f.html" target="">LOOKUP函数用法全解</a></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>excel</category>
      </categories>
  </entry>
  <entry>
    <title>Excel:VLOOKUP函数常用方法集合！</title>
    <url>/2020/09/14/excel-vlookup-han-shu-chang-yong-fang-fa-ji-he/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>VLOOKUP函数是工作中最常用的一种查找函数，掌握好VLOOKUP函数能够极大提高工作的效率。</p>
<a id="more"></a>

<h1 id="函数解析"><a href="#函数解析" class="headerlink" title="函数解析"></a>函数解析</h1><p>VLOOKUP函数用于首列查找并返回指定列的值，字母“V”表示垂直方向。</p>
<p>VLOOKUP函数的语法如下：</p>
<pre class="line-numbers language-tex"><code class="language-tex">VLOOKUP（lookup_value，table_array，col_index_num，[range_lookup]）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其中，第1参数<code>lookup_value</code>为要搜索的值，第2参数<code>table_array</code>为首列可能包含查找值的单元格区域或数组，第3参数<code>col_index_num</code>为需要从table_array中返回的匹配值的列号，第4参数<code>range_lookup</code>用于指定精确匹配或近似匹配模式。</p>
<p>当 <code>range_lookup</code>为TRUE、被省略或使用非零数值时，表示近似匹配模式，要求table_array第一列中的值必须按升序排列，并返回小于等于lookup_value的最大值对应列的数据。当参数为FALSE时（常用数字0或保留参数前的逗号代替），表示只查找精确匹配值，返回table_array的第一列中第一个找到的值，精确匹配模式不必对table_array第一列中的值进行排序。</p>
<p>如果使用精确匹配模式且第1参数为文本，则可以在第1参数中使用通配符问号（？）和星号（*）。VLOOKUP函数不区分字母大小写。</p>
<h1 id="基本查找"><a href="#基本查找" class="headerlink" title="基本查找"></a>基本查找</h1><p>A3:B7单元格区域为字母等级查询表，表示60分以下为E级、60<del>69分为D级、70</del>79分为C级、80~89分为B级、90分以上为A级。D:G列为初二年级1班语文测验成绩表，如何根据语文成绩返回其字母等级？</p>
<p>在H3:H13单元格区域中输入<code>=VLOOKUP（G3，$A$3:$B$7,2）</code></p>
<p>返回第二列</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141158.png" alt="image-20200914082729751" style="zoom: 67%;">

<h1 id="返回多列-一"><a href="#返回多列-一" class="headerlink" title="返回多列(一)"></a>返回多列(一)</h1><img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141204.png" alt="image-20200914083539515" style="zoom:67%;">

<p>按照上面的方式输入公式</p>
<pre class="line-numbers language-tex"><code class="language-tex">=VLOOKUP(G4,$A$2:$E$13,2,0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里将数据源区域进行绝对引用。</p>
<p>然后下拉，得到查询结果：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141209.png" alt="image-20200914084423147" style="zoom: 50%;">

<p>但是将其向右,向下拉的时候，此时会匹配错误！</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141214.png" alt="image-20200914091057439" style="zoom: 50%;">

<p>解决方案：</p>
<p>姓名，语文，数学，英语，四列是挨着的，可以用<code>COLUMN()</code> 函数 返回要查找的列号：</p>
<p>完整公式：</p>
<pre class="line-numbers language-tex"><code class="language-tex">=VLOOKUP($G4,$A$3:$E$13,COLUMN(B2),0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141220.png" alt="image-20200914091436040" style="zoom: 50%;">

<p>解释：</p>
<p><code>COLUMN(B2)</code> 返回的是列号，此时返回的是2，当向右侧拖动的时候，依次是 C2,D2,E2, <code>COLUMN</code> 返回的值依次是3，4，5，分别对应我们数据源中的语文，数学，英语列。</p>
<p>还有一点是对索引值的列号进行了绝对引用，因为当我们向右拖动公式的时候，要索引的列是不变的，需要将其进行绝对引用。</p>
<h1 id="返回多列-二"><a href="#返回多列-二" class="headerlink" title="返回多列(二)"></a>返回多列(二)</h1><p>上面的数据中，要查找的列和数据源中的列，都是挨着并且顺序是相同的，但是如果顺序不相同，该如何匹配呢？</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141224.png" alt="image-20200914094019765" style="zoom:67%;">

<p>此时再用 <code>COLUMN()</code> 函数就不太行了，此时可以用 <code>MATCH()</code> 函数，函数返回匹配值的列号。</p>
<p>例如要查找的英语在源数据中是第几列。</p>
<pre class="line-numbers language-tex"><code class="language-tex">=MATCH(K4,2:2,0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果返回为5：</p>
<p>查询我们想要的结果：</p>
<pre class="line-numbers language-tex"><code class="language-tex">=VLOOKUP($J5,$A:$H,MATCH(K4,2:2,0))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141230.png" alt="image-20200914095704733" style="zoom:67%;">

<h1 id="关键字为多列-多条件-查询"><a href="#关键字为多列-多条件-查询" class="headerlink" title="关键字为多列(多条件)查询"></a>关键字为多列(多条件)查询</h1><p><code>VLOOKUP</code> 是以第一列为关键字进行查询的。当条件为多个时，该如何查询呢？</p>
<p>例如, 根据右侧的条件进行查询</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141236.png" alt="image-20200914102128243" style="zoom: 50%;">

<p><strong>方法一: 辅助列</strong></p>
<p>将要查超的关键字进行合并:</p>
<pre class="line-numbers language-tex"><code class="language-tex">=B2&C2&D2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141242.png" alt="image-20200914102552194" style="zoom: 67%;">

<p>在进行查询：</p>
<pre class="line-numbers language-tex"><code class="language-tex">=VLOOKUP(K3&L3&M3,A:H,7,0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141247.png" alt="image-20200914103052904" style="zoom:67%;">

<p><strong>方法二:</strong> index+match</p>
<p>数组公式：</p>
<pre><code>=INDEX($G$2:$G$585,MATCH(K3&amp;L3&amp;M3,$B$2:$B$600&amp;$C$2:$C$600&amp;$D$2:$D$600,0))</code></pre>
<p>输入完公式后，<code>ctrl</code> + <code>shift</code> + <code>enter</code></p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141251.png" alt="image-20200914105857485" style="zoom:67%;">

<h1 id="表有合并单元格"><a href="#表有合并单元格" class="headerlink" title="表有合并单元格"></a>表有合并单元格</h1><p>查找函数VLOOKUP这个函数,大家喜闻乐见, 很多表中使用了合并单元格,这样就会导致正常的查找函数无法返回正确结果。</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141256.png" alt="image-20200914111903406" style="zoom:67%;">

<p>使用一般的查找方式进行查找:</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141302.png" alt="image-20200914112134697" style="zoom: 67%;">

<p>解决：</p>
<p>使用 <code>LOOKUP()</code> 函数，</p>
<pre class="line-numbers language-tex"><code class="language-tex">=LOOKUP("座", $D$3:D3)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141308.png" alt="image-20200914112542483" style="zoom: 67%;">

<p>在要查找的地方进行公式输入：</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141314.png" alt="image-20200914112810041" style="zoom:67%;">



<h1 id="LOOKUP-COLUMN快速填充做工资条"><a href="#LOOKUP-COLUMN快速填充做工资条" class="headerlink" title="LOOKUP+COLUMN快速填充做工资条"></a>LOOKUP+COLUMN快速填充做工资条</h1><p>Vlookup与COLUMN函数的嵌套也可以应用在制作工资条上，并且员工数越多，使用该法越方便。下表是某公司部分员工的工资表，现在要将其制作成工资条，如何完成呢？</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141412.png" alt="20190114174727555008" style="zoom:80%;">

<p>（1）可以将表格列表标题复制在H1:M1区域。</p>
<p>（2）9名员工，每名工资条3行，共需27行。选中G1:G27，输入任何一个输入数字后按Ctrl+Enter键填充。这一列是为双击向下填充准备的，避免员工人数多向下拖动填充的不便。</p>
<p>（3）在H2单元格输入序号1，然后在I2单元格中输入公式：</p>
<p>=VLOOKUP($H2,$A$2:$F$10, COLUMN(B2),)</p>
<p>（4）右拉填充公式。</p>
<p>（5）选中H1：M3区域，双击右下角填充句柄（小方块）向下填充即可完成工资条的制作。</p>
<p>操作演示请看↓↓↓</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141421.gif" alt="20190114174728818009" style="zoom: 67%;">

<h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="1、MATCH-函数"><a href="#1、MATCH-函数" class="headerlink" title="1、MATCH()函数"></a>1、MATCH()函数</h2><p>Match函数是Excel中使用较为广泛的一个函数。其主要作用是：在“范围”单元格中搜索特定的项，然后返回该项在此区域中的相对位置。</p>
<p>通俗的将：MATCH函数返回指定值在数组中的位置，如果在数组中没有找到该值则返回#N/A。</p>
<p>例如：如果A1：A3区域中包含值5,15和28，那么公式=MATCH(15,A1:A3,0)返回数字2，因为15是该区域中的第二项。</p>
<p>MATCH函数返回指定值在数组中的位置，通常和其它函数配合使用，如INDEX函数、VLOOKUP函数等。</p>
<p><strong>语法</strong>：</p>
<pre class="line-numbers language-tex"><code class="language-tex">MATCH(lookup_value, lookup_array, [match_type])。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><p><strong><code>lookup_value</code></strong> 必需。要在 <strong><em>lookup_array\</em></strong> 中匹配的值。<br>*<strong>lookup_value*</strong> 参数可以为值（数字、文本或逻辑值）或对数字、文本或逻辑值的单元格引用。</p>
</li>
<li><p><strong><code>lookup_array</code></strong> 必需。要搜索的单元格区域。</p>
</li>
<li><p><strong><code>match_type</code></strong> 可选。数字 -1、0 或 1。<strong>match_type</strong> 参数指定 Excel 如何将<em>lookup_value</em> 与 <strong>lookup_array</strong> 中的值匹配。此参数的默认值为 1。</p>
<blockquote>
<p><strong>1 或省略</strong></p>
<p><strong>MATCH</strong> 查找小于或等于 <strong>lookup_value</strong> 的最大值。<strong>lookup_array</strong> 参数中的值必须以<strong>升序排序</strong>，例如：…-2, -1, 0, 1, 2, …, A-Z, FALSE, TRUE。</p>
<p><strong>0</strong></p>
<p><strong>MATCH</strong> 查找完全等于 <strong>lookup_value</strong> 的第一个值。<strong>lookup_array</strong> 参数中的值可按任何顺序排列。</p>
<p><strong>-1</strong></p>
<p><strong>MATCH</strong> 查找大于或等于 <strong>lookup_value</strong> *<em>的最小值。</em>lookup_array* **参数中的值必须按降序排列，例如：TRUE, FALSE, Z-A, …2, 1, 0, -1, -2, … 等等。</p>
</blockquote>
</li>
</ul>
<p><strong>注意事项：</strong></p>
<p>1、MATCH函数返回查找项的<strong>位置</strong>，而不是值本身。如果需要获取值本身，则需要和其它函数一起使用，如INDEX、VLOOKUP。</p>
<p>2、匹配文本值时，<strong>MATCH</strong> 函数不区分大小写字母。</p>
<p>3、如果 <strong>match_type</strong>为 0 且 <strong>lookup_value</strong> 为文本字符串，您可在<strong>lookup_value</strong> 参数中使用通配符 - 问号 (<strong>?</strong>) 和星号 (*<strong>**) 。问号匹配任意单个字符；星号匹配任意一串字符。如果要查找实际的问号或星号，请在字符前键入波形符 (</strong>~**)。</p>
<p>4、如果 <strong>MATCH</strong> 函数查找匹配项不成功，它会返回错误值 #N/A。</p>
<h2 id="2、INDEX-函数"><a href="#2、INDEX-函数" class="headerlink" title="2、INDEX() 函数"></a>2、INDEX() 函数</h2><p><strong>作用：</strong>返回表格或区域中的值或值的应用。</p>
<p><strong>语法</strong>：</p>
<pre class="line-numbers language-tex"><code class="language-tex">INDEX(array, row_num,[column_num])。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>解释：</strong>INDEX（数组或区域，行号，列号）。</p>
<p>1、如果数组只包含一行或一列，则对应的参数Row_num或Column_num为可选参数。</p>
<p>2、如果数组有多行或多列，但只使用参数Row_num或Column_num，函数INDEX返回数组中的整行或整列，且返回值也为数组。</p>
<p>3、如果同时使用参数Row_num或Column_num，函数INDEX返回Row_num和Column_num交叉处的单元格中的值。</p>
<p>4、如果将Row_num或Column_num设置为（零），函数INDEX则分段返回真个列或行的数组数值。</p>
<p>5、若要使用以数组形式返回的值，请将INDEX函数以数组公式形式输入，对于行以水平单元格区域的形式输入，对于列以垂直单元格区域的形式输入。若要输入数组公式，请按Ctrl+Shift+Enter。</p>
<h2 id="3、LOOKUP-函数"><a href="#3、LOOKUP-函数" class="headerlink" title="3、LOOKUP()函数"></a>3、LOOKUP()函数</h2><h2 id="3、COLUMN-函数"><a href="#3、COLUMN-函数" class="headerlink" title="3、COLUMN()函数"></a>3、COLUMN()函数</h2><p>简单说下COLUMN函数的含义和用法。</p>
<p>COLUMN函数用于获取列号，使用格式<code>COLUMN(reference)</code>，当中Reference为需要得到其列标的单元格或单元格区域。典型用法有三种。</p>
<p>1.COLUMN()</p>
<p>参数为空，COLUMN()返回公式所在单元格的列坐标值，如下公式位于B7单元格，所以返回值为2。</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141441.png" alt="20190114174726994004" style="zoom:80%;">



<p>2、COLUMN(C4)</p>
<p>参数为具体的某个单元格，如COLUMN(C4)，返回C4所在列号3，如下。</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141542.png" alt="20190114174726805005" style="zoom:80%;">

<p>COLUMN(A2:E6)</p>
<p>参数为单元格区域，如COLUMN(A2:E6)，返回区域中第1列（A2所在列）的列号值1，如下。</p>
<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200914141548.png" alt="20190114174726232006" style="zoom:80%;">



<p>用COLUMN取代VLOOKUP第三参数</p>
<p>参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/31985290" target="">Excel函数公式：掌握Match函数，如虎添翼</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/32935992" target="">Excel函数公式：你真的了解INDEX函数吗</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/31202670" target="">Excel函数公式：Lookup函数，查找引用之王！！！</a> </li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>excel</category>
      </categories>
      <tags>
        <tag>VLOOKUP</tag>
        <tag>COLUMN，INDEX</tag>
        <tag>MATCH</tag>
        <tag>LOOPUP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客Ayer主题自定义配置</title>
    <url>/2020/09/13/hexo-bo-ke-ayer-zhu-ti-zi-ding-yi-pei-zhi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>Ayer主题，下面是我的部分配置，可以参考，希望能帮到你</strong></p>
<a id="more"></a>

<h1 id="主要命令说明"><a href="#主要命令说明" class="headerlink" title="主要命令说明"></a>主要命令说明</h1><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 初始化网站 </span>
$ cd myblog 
$ hexo init 

<span class="token comment" spellcheck="true"># 新建一篇文章 </span>
$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> &lt;title<span class="token punctuation">></span> 
$ hexo new post "article_name" <span class="token comment" spellcheck="true"># 新建文章 </span>
$ hexo new page "name" <span class="token comment" spellcheck="true"># 少用 </span>

<span class="token comment" spellcheck="true"># 生成静态文件,可简写为 hexo g </span>
$ hexo generate 
$ hexo g <span class="token comment" spellcheck="true">#</span>

生成草稿 
$ hexo putlish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> &lt;filename<span class="token punctuation">></span> 

<span class="token comment" spellcheck="true"># 启动服务器 可以简写为 hexo s </span>
$ hexo server <span class="token comment" spellcheck="true"># 参数: -p:指定端口 </span>
<span class="token comment" spellcheck="true"># -s:只使用静态文件 </span>
<span class="token comment" spellcheck="true"># -i:指定ip地址 </span>

<span class="token comment" spellcheck="true"># 部署网站,可以简写为 hexo d </span>
$ hexo deploy 

<span class="token comment" spellcheck="true"># 清除缓存文件 db.json 和已经成成的静态文件 public </span>
$hexo clean 

<span class="token comment" spellcheck="true"># 查看版本 </span>
$ hexo version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h1><p>由于<code>Hex 自带的代码高亮主题显示不好看，所以主题中使用到了 [hexo-prism-plugin](https://github.com/ele828/hexo-prism-plugin) 的</code>Hexo插件来做代码高亮，安装命令如下：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后，修改 <code>Hexo </code>根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 44行 打开生成文件时同时生成文件夹 </span>
<span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>
<span class="token key atrule">highlight</span><span class="token punctuation">:</span> 
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false </span>

<span class="token comment" spellcheck="true">#prismjs:</span>
<span class="token comment" spellcheck="true">#  enable: false</span>
<span class="token comment" spellcheck="true">#  preprocess: true</span>
<span class="token comment" spellcheck="true">#  line_number: true</span>
<span class="token comment" spellcheck="true">#  tab_replace: ''</span>

<span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span> 
    <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span> <span class="token comment" spellcheck="true"># realtime/preprocess </span>
    <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span> 
    <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># default false </span>
    custom_css<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h1><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>
 <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml
 <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h1><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p>
<p>安装命令如下：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span> 
    <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>
    <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false </span>
    <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置文章字数统计为 true. </span>
    <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true. </span>
    <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读时长. </span>
    <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读次数.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="EVANYOU三角彩带背景"><a href="#EVANYOU三角彩带背景" class="headerlink" title="EVANYOU三角彩带背景"></a>EVANYOU三角彩带背景</h1><h2 id="引入位置"><a href="#引入位置" class="headerlink" title="引入位置"></a>引入位置</h2><p>路径：【Hexo\themes\ayer\layout\layout.ejs】</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/head'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>
<span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content on"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> body <span class="token operator">%</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/footer'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>cache<span class="token punctuation">:</span> <span class="token operator">!</span>config<span class="token punctuation">.</span>relative_link<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"float_btns"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/totop'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>
    <span class="token operator">&lt;</span>aside <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sidebar on"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/sidebar'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>aside<span class="token operator">></span>
    <span class="token operator">&lt;</span>script<span class="token operator">></span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">"(max-width: 768px)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'on'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.sidebar'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'on'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/modal'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/after-footer'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>

    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>music<span class="token operator">&amp;&amp;</span>theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>enable<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/music'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 三角彩带背景 <span class="token operator">--</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>canvas id<span class="token operator">=</span><span class="token string">"evanyou-canvas"</span> style<span class="token operator">=</span><span class="token string">"opacity: 0.3; position: fixed; top: 0px; left: 0px; z-index: -1; width: 100%; height: 100%; pointer-events: none;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/XXXZhy/Blog_Image/js/evanyou_canvas.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="Valine评论框加背景"><a href="#Valine评论框加背景" class="headerlink" title="Valine评论框加背景"></a>Valine评论框加背景</h1><p>路径：【Hexo\themes\ayer\layout_partial\post\valine.ejs】</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(!index</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.leancloud</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.leancloud.enable){</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- valine评论 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vcomments-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vcomments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn1.lncld.net/static/js/3.0.4/av-min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- &lt;script src='https://cdn.jsdelivr.net/npm/valine@1.3.10/dist/Valine.min.js'>&lt;/script> --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//unpkg.com/valine/dist/Valine.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 评论背景 --></span>                                                         
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector"><span class="token id">#veditor</span></span><span class="token punctuation">{</span><span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">10</span>rem<span class="token punctuation">;</span>
        <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(https://gitee.com/cungudafa/source/raw/master/img/gif/katon/pinkcoolpig.gif)</span><span class="token punctuation">;</span>
        <span class="token property">background-size</span><span class="token punctuation">:</span> contain<span class="token punctuation">;</span>
        <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>
        <span class="token property">background-position</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">resize</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- Valine配置 --></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token keyword">new</span> <span class="token class-name">Valine</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        el<span class="token punctuation">:</span> <span class="token string">'#vcomments'</span><span class="token punctuation">,</span>
        enableQQ<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        app_id<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.leancloud.app_id %>'</span><span class="token punctuation">,</span>
        app_key<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.leancloud.app_key %>'</span><span class="token punctuation">,</span>
        path<span class="token punctuation">:</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>
        <span class="token comment" spellcheck="true">//notify: '&lt;%- theme.valine.notify %>',</span>
        <span class="token comment" spellcheck="true">//verify: '&lt;%- theme.valine.verify %>',</span>
        avatar<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.valine.avatar %>'</span><span class="token punctuation">,</span>
        placeholder<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.valine.placeholder %>'</span><span class="token punctuation">,</span>
        recordIP<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

        <span class="token comment" spellcheck="true">// 设置Bilibili表情包地址</span>
        emojiCDN<span class="token punctuation">:</span> <span class="token string">'https://cdn.jsdelivr.net/gh/XXXZhy/Blog_Image/valine_emoticon/'</span><span class="token punctuation">,</span> 
        <span class="token comment" spellcheck="true">// 表情title和图片映射</span>
        emojiMaps<span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">"墙角滑稽"</span><span class="token punctuation">:</span> <span class="token string">"害怕滑稽.gif"</span><span class="token punctuation">,</span>
            <span class="token string">"仙女下凡"</span><span class="token punctuation">:</span> <span class="token string">"仙女下凡.webp"</span><span class="token punctuation">,</span>
            <span class="token string">"听歌"</span><span class="token punctuation">:</span> <span class="token string">"听歌.webp"</span><span class="token punctuation">,</span>
            <span class="token string">"嫌弃"</span><span class="token punctuation">:</span> <span class="token string">"嫌弃.webp"</span><span class="token punctuation">,</span>
            <span class="token string">"害羞"</span><span class="token punctuation">:</span> <span class="token string">"害羞.webp"</span><span class="token punctuation">,</span>
            <span class="token string">"彩虹滑稽"</span><span class="token punctuation">:</span> <span class="token string">"彩虹滑稽.webp"</span><span class="token punctuation">,</span>
            <span class="token string">"快走"</span><span class="token punctuation">:</span> <span class="token string">"快走.webp"</span><span class="token punctuation">,</span>
            <span class="token string">"扯脸"</span><span class="token punctuation">:</span> <span class="token string">"扯脸.webp"</span><span class="token punctuation">,</span>
            <span class="token string">"摸脸"</span><span class="token punctuation">:</span> <span class="token string">"摸脸.webp"</span><span class="token punctuation">,</span>
            <span class="token string">"流汗"</span><span class="token punctuation">:</span> <span class="token string">"流汗.webp"</span><span class="token punctuation">,</span>
            <span class="token string">"滑滑板"</span><span class="token punctuation">:</span> <span class="token string">"滑滑板.webp"</span><span class="token punctuation">,</span>
            <span class="token string">"点赞"</span><span class="token punctuation">:</span> <span class="token string">"点赞.webp"</span><span class="token punctuation">,</span>
            <span class="token string">"转圈圈"</span><span class="token punctuation">:</span> <span class="token string">"转圈圈.webp"</span><span class="token punctuation">,</span>
            <span class="token comment" spellcheck="true">// ... 更多表情</span>
        <span class="token punctuation">}</span>     
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> infoEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#vcomments .info'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>infoEle <span class="token operator">&amp;&amp;</span> infoEle<span class="token punctuation">.</span>childNodes <span class="token operator">&amp;&amp;</span> infoEle<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        infoEle<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            item<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector"><span class="token id">#vcomments-box</span> </span><span class="token punctuation">{</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token number">30</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
        <span class="token selector"><span class="token id">#vcomments-box</span> </span><span class="token punctuation">{</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token number">0</span>px<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token id">#vcomments-box</span> <span class="token id">#vcomments</span> </span><span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.v</span> <span class="token class">.vlist</span> <span class="token class">.vcard</span> <span class="token class">.vh</span> </span><span class="token punctuation">{</span>
        <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector"><span class="token class">.v</span> <span class="token class">.vlist</span> <span class="token class">.vcard</span> </span><span class="token punctuation">{</span>
        <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="运行天数"><a href="#运行天数" class="headerlink" title="运行天数"></a>运行天数</h1><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>路径：【Hexo\themes\ayer\layout_partial\footer.ejs】加入</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 运行天数 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>runtime_span<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p>路径：【Hexo\themes\ayer\layout_partial\footer.ejs】加入，在runtime_span标签后加</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            
    <span class="token keyword">function</span> <span class="token function">show_runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"show_runtime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        X <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"02/22/2020 22:22:22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        T <span class="token operator">=</span> <span class="token punctuation">(</span>Y<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> X<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        M <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        a <span class="token operator">=</span> T <span class="token operator">/</span> M<span class="token punctuation">;</span>
        A <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> A<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>
        B <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        c <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> B<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>
        C <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">-</span> B<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        D <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">-</span> C<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        runtime_span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"小站在各种崩坏中坚持了: "</span> <span class="token operator">+</span> A <span class="token operator">+</span> <span class="token string">"天"</span> <span class="token operator">+</span> B <span class="token operator">+</span> <span class="token string">"小时"</span> <span class="token operator">+</span> C <span class="token operator">+</span> <span class="token string">"分"</span> <span class="token operator">+</span> D <span class="token operator">+</span> <span class="token string">"秒"</span>
    <span class="token punctuation">}</span>
    <span class="token function">show_runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="自我介绍botui机器人"><a href="#自我介绍botui机器人" class="headerlink" title="自我介绍botui机器人"></a>自我介绍botui机器人</h1><p>路径：【FHexo\source\about\index.md】</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">-</span>
title<span class="token punctuation">:</span> about
date<span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">09</span> <span class="token number">19</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">38</span>
<span class="token operator">--</span><span class="token operator">-</span>

<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"entry-content"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"hello-mashiro"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"popcontainer"</span> style<span class="token operator">=</span><span class="token string">"min-height: 300px; padding: 2px 6px 4px; background-color: rgba(242, 242, 242, 0.5); border-radius: 10px;"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>center<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>h4<span class="token operator">></span>
    与<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>ruby<span class="token operator">></span>
    XXXZhy<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>rp<span class="token operator">></span>
    （<span class="token operator">&lt;</span><span class="token operator">/</span>rp<span class="token operator">></span>
    <span class="token operator">&lt;</span>rp<span class="token operator">></span>
    ）<span class="token operator">&lt;</span><span class="token operator">/</span>rp<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ruby<span class="token operator">></span>
    通话中：<span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>center<span class="token operator">></span>
    <span class="token operator">&lt;</span>bot<span class="token operator">-</span>ui<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>botui<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>


<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/HG95/CDN/botui_hhg.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/botui/0.3.9/botui-theme-default.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/botui/0.3.9/botui.min.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将上面这个的botui_xxxzhy.js下载下来，里面最后的对话改成自己的，再引进便可以了。</p>
<h1 id="文章顶置"><a href="#文章顶置" class="headerlink" title="文章顶置"></a>文章顶置</h1><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> uninstall hexo-generator-index --save
$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index-pin-top --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">index_generator</span><span class="token punctuation">:</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">''</span>
  <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">10</span>
  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>要在文章的开始加入 <code>top:</code> 是否开启置顶</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo博客Ayer主题自定义配置
<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-09-13 19:12:26</span>
<span class="token key atrule">categories</span><span class="token punctuation">:</span> Hexo
tags<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="页内音乐播放器"><a href="#页内音乐播放器" class="headerlink" title="页内音乐播放器"></a>页内音乐播放器</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-tag-aplayer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>公式</strong></p>
<pre class="line-numbers language-yaml"><code class="language-yaml">&lt;<span class="token tag">!--</span> 简单示例 (id<span class="token punctuation">,</span> server<span class="token punctuation">,</span> type)  <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>
&lt;<span class="token tag">!--</span> 网易云音乐的歌单id <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>
<span class="token punctuation">{</span>% meting "60198" "netease" "playlist" %<span class="token punctuation">}</span>

&lt;<span class="token tag">!--</span> 进阶示例 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span>
<span class="token punctuation">{</span>% meting "60198" "netease" "playlist" "autoplay" "mutex<span class="token punctuation">:</span>false" "listmaxheight<span class="token punctuation">:</span>340px" "preload<span class="token punctuation">:</span>none" "theme<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#ad7a86"%}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>配置_config.yml文件</strong></p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">aplayer</span><span class="token punctuation">:</span>
  <span class="token key atrule">meting</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h1><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p>
<p>安装命令如下：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="添加视频"><a href="#添加视频" class="headerlink" title="添加视频"></a>添加视频</h1><p>直接在<code>.md</code> 文件中引入代码：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">padding-bottom</span><span class="token punctuation">:</span><span class="token number">75%</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//player.bilibili.com/player.html?aid<span class="token punctuation">=</span>884294177&amp;bvid<span class="token punctuation">=</span>BV1iK4y1Y7dE&amp;cid<span class="token punctuation">=</span>227370204&amp;page<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span> 
<span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span>  <span class="token attr-name">framespacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">  
<span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span></span><span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div style="position:relative; width:100%; height:0; padding-bottom:75%;">
<iframe src="//player.bilibili.com/player.html?aid=884294177&amp;bvid=BV1iK4y1Y7dE&amp;cid=227370204&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" style="position:absolute; width:100%; height:100%;  left:0; top:0"> </iframe>
</div>
这里是先获取嵌入式分享的代码：

<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200913221431.png" alt="image-20200913221305549" style="zoom: 67%;">

<p>提取嵌入代码里面的 src ，并复制到上面的代码中。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://www.xxxzhy.com/2020/04/28/Hexo%E5%8D%9A%E5%AE%A2Ayer%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/" target="_blank">Hexo博客Ayer主题自定义配置</a></li>
<li><a href="https://wenyan.online/2020/08/09/hexo-bo-ke-da-jian/" target="_blank">hexo博客搭建</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/76951130" target="_blank">免费CDN：jsDelivr+Github 使用方法</a></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2020/09/12/di-yi-pian-bo-ke/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>记录第一篇博客</p>
<a id="more"></a>

<img src="https://raw.githubusercontent.com/HG1227/image/master/img_tuchuang/20200912224352.jpg" alt="wallhaven-wy751x" style="zoom:80%;"><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>excel</category>
      </categories>
      <tags>
        <tag>excel</tag>
      </tags>
  </entry>
</search>
